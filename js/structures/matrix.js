/** Small scrappy matrix library **/

function Matrix4(){
    if (arguments[15] !== undefined){
        this.m = Array.prototype.slice.call(arguments);
    } else {
        this.m = arguments[0];
    }
}
Matrix4.prototype = {
    mult: function(that){
        var a = this.m, b = that.m;
        
        this.m = [
            a[0]*b[0]  + a[1]*b[4]  + a[2]*b[8]  + a[3]*b[12],
            a[4]*b[0]  + a[5]*b[4]  + a[6]*b[8]  + a[7]*b[12],
            a[8]*b[0]  + a[9]*b[4]  + a[10]*b[8] + a[11]*b[12],
            a[12]*b[0] + a[13]*b[4] + a[14]*b[8] + a[15]*b[12],
            
            a[0]*b[1]  + a[1]*b[5]  + a[2]*b[9]  + a[3]*b[13],
            a[4]*b[1]  + a[5]*b[5]  + a[6]*b[9]  + a[7]*b[13],
            a[8]*b[1]  + a[9]*b[5]  + a[10]*b[9] + a[11]*b[13],
            a[12]*b[1] + a[13]*b[5] + a[14]*b[9] + a[15]*b[13],
            
            a[0]*b[2]  + a[1]*b[6]  + a[2]*b[10]  + a[3]*b[14],
            a[4]*b[2]  + a[5]*b[6]  + a[6]*b[10]  + a[7]*b[14],
            a[8]*b[2]  + a[9]*b[6]  + a[10]*b[10] + a[11]*b[14],
            a[12]*b[2] + a[13]*b[6] + a[14]*b[10] + a[15]*b[14],
            
            a[0]*b[3]  + a[1]*b[7]  + a[2]*b[11]  + a[3]*b[15],
            a[4]*b[3]  + a[5]*b[7]  + a[6]*b[11]  + a[7]*b[15],
            a[8]*b[3]  + a[9]*b[7]  + a[10]*b[11] + a[11]*b[15],
            a[12]*b[3] + a[13]*b[7] + a[14]*b[11] + a[15]*b[15]
        ];
    },
    add: function(that){
        var a = this.m, b = that.m;
        
        this.m = [
            a[0] + b[0],
            a[1] + b[1],
            a[2] + b[2],
            a[3] + b[3],
            
            a[4] + b[4],
            a[5] + b[5],
            a[6] + b[6],
            a[7] + b[7],
            
            a[8] + b[8],
            a[9] + b[9],
            a[10] + b[10],
            a[11] + b[11],
            
            a[12] + b[12],
            a[13] + b[13],
            a[14] + b[14],
            a[15] + b[15],
        ];
    },
    sub: function(that){
        var a = this.m, b = that.m;
        
        this.m = [
            a[0] - b[0],
            a[1] - b[1],
            a[2] - b[2],
            a[3] - b[3],
            
            a[4] - b[4],
            a[5] - b[5],
            a[6] - b[6],
            a[7] - b[7],
            
            a[8] - b[8],
            a[9] - b[9],
            a[10] - b[10],
            a[11] - b[11],
            
            a[12] - b[12],
            a[13] - b[13],
            a[14] - b[14],
            a[15] - b[15],
        ];
    },
    
    inverse: function(){
        var m = this.m;
        var inv = [];
        inv[0] = m[5]  * m[10] * m[15] - 
                 m[5]  * m[11] * m[14] - 
                 m[9]  * m[6]  * m[15] + 
                 m[9]  * m[7]  * m[14] +
                 m[13] * m[6]  * m[11] - 
                 m[13] * m[7]  * m[10];
    
        inv[4] = -m[4]  * m[10] * m[15] + 
                  m[4]  * m[11] * m[14] + 
                  m[8]  * m[6]  * m[15] - 
                  m[8]  * m[7]  * m[14] - 
                  m[12] * m[6]  * m[11] + 
                  m[12] * m[7]  * m[10];
    
        inv[8] = m[4]  * m[9] * m[15] - 
                 m[4]  * m[11] * m[13] - 
                 m[8]  * m[5] * m[15] + 
                 m[8]  * m[7] * m[13] + 
                 m[12] * m[5] * m[11] - 
                 m[12] * m[7] * m[9];
    
        inv[12] = -m[4]  * m[9] * m[14] + 
                   m[4]  * m[10] * m[13] +
                   m[8]  * m[5] * m[14] - 
                   m[8]  * m[6] * m[13] - 
                   m[12] * m[5] * m[10] + 
                   m[12] * m[6] * m[9];
    
        inv[1] = -m[1]  * m[10] * m[15] + 
                  m[1]  * m[11] * m[14] + 
                  m[9]  * m[2] * m[15] - 
                  m[9]  * m[3] * m[14] - 
                  m[13] * m[2] * m[11] + 
                  m[13] * m[3] * m[10];
    
        inv[5] = m[0]  * m[10] * m[15] - 
                 m[0]  * m[11] * m[14] - 
                 m[8]  * m[2] * m[15] + 
                 m[8]  * m[3] * m[14] + 
                 m[12] * m[2] * m[11] - 
                 m[12] * m[3] * m[10];
    
        inv[9] = -m[0]  * m[9] * m[15] + 
                  m[0]  * m[11] * m[13] + 
                  m[8]  * m[1] * m[15] - 
                  m[8]  * m[3] * m[13] - 
                  m[12] * m[1] * m[11] + 
                  m[12] * m[3] * m[9];
    
        inv[13] = m[0]  * m[9] * m[14] - 
                  m[0]  * m[10] * m[13] - 
                  m[8]  * m[1] * m[14] + 
                  m[8]  * m[2] * m[13] + 
                  m[12] * m[1] * m[10] - 
                  m[12] * m[2] * m[9];
    
        inv[2] = m[1]  * m[6] * m[15] - 
                 m[1]  * m[7] * m[14] - 
                 m[5]  * m[2] * m[15] + 
                 m[5]  * m[3] * m[14] + 
                 m[13] * m[2] * m[7] - 
                 m[13] * m[3] * m[6];
    
        inv[6] = -m[0]  * m[6] * m[15] + 
                  m[0]  * m[7] * m[14] + 
                  m[4]  * m[2] * m[15] - 
                  m[4]  * m[3] * m[14] - 
                  m[12] * m[2] * m[7] + 
                  m[12] * m[3] * m[6];
    
        inv[10] = m[0]  * m[5] * m[15] - 
                  m[0]  * m[7] * m[13] - 
                  m[4]  * m[1] * m[15] + 
                  m[4]  * m[3] * m[13] + 
                  m[12] * m[1] * m[7] - 
                  m[12] * m[3] * m[5];
    
        inv[14] = -m[0]  * m[5] * m[14] + 
                   m[0]  * m[6] * m[13] + 
                   m[4]  * m[1] * m[14] - 
                   m[4]  * m[2] * m[13] - 
                   m[12] * m[1] * m[6] + 
                   m[12] * m[2] * m[5];
    
        inv[3] = -m[1] * m[6] * m[11] + 
                  m[1] * m[7] * m[10] + 
                  m[5] * m[2] * m[11] - 
                  m[5] * m[3] * m[10] - 
                  m[9] * m[2] * m[7] + 
                  m[9] * m[3] * m[6];
    
        inv[7] = m[0] * m[6] * m[11] - 
                 m[0] * m[7] * m[10] - 
                 m[4] * m[2] * m[11] + 
                 m[4] * m[3] * m[10] + 
                 m[8] * m[2] * m[7] - 
                 m[8] * m[3] * m[6];
    
        inv[11] = -m[0] * m[5] * m[11] + 
                   m[0] * m[7] * m[9] + 
                   m[4] * m[1] * m[11] - 
                   m[4] * m[3] * m[9] - 
                   m[8] * m[1] * m[7] + 
                   m[8] * m[3] * m[5];
    
        inv[15] = m[0] * m[5] * m[10] - 
                  m[0] * m[6] * m[9] - 
                  m[4] * m[1] * m[10] + 
                  m[4] * m[2] * m[9] + 
                  m[8] * m[1] * m[6] - 
                  m[8] * m[2] * m[5];
    
        var det = m[0] * inv[0] + m[1] * inv[4] + m[2] * inv[8] + m[3] * inv[12];
    
        if (det == 0)
            return false;
    
        det = 1.0 / det;
    
        for (var i = 0; i < 16; i++)
            this.m[i] = inv[i] * det;
        
        return true;
    },
    transpose: function(){
        var a = this.m;
        this.m = [
            a[0],  a[4], a[8],  a[12],
            a[1],  a[5], a[9],  a[13],
            a[2],  a[6], a[10], a[14],
            a[3],  a[7], a[11], a[15]
        ];
    }
};






